% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/costFun.R
\name{costFun}
\alias{costFun}
\title{Cost minimization functions for nonconvex technologies}
\usage{
costFun(
  xobs,
  yobs,
  wobs,
  xref = NULL,
  yref = NULL,
  rts = "vrs",
  parallel = FALSE,
  cores = availableCores(omit = 1)
)
}
\arguments{
\item{xobs}{a \eqn{K \times N} matrix with \eqn{K} the number of inputs and
\eqn{N} the number of decision making units (DMUs) under evaluation.}

\item{yobs}{a \eqn{Q \times N} matrix with \eqn{Q} the number of outputs and
\eqn{N} the number of DMUs under evaluation.}

\item{wobs}{a \eqn{K \times N} matrix of input prices.}

\item{xref}{(optional). a  \eqn{K \times N_r} matrix on inputs of DMUs
serving as benchmark (or use to define the technology).
Default to \code{'xobs'}.}

\item{yref}{(optional). a  \eqn{Q \times N_r} matrix on outputs of DMUs
serving as benchmark (or use to define the technology).
Default to \code{'yobs'}.}

\item{rts}{Character string specifying the returns to scale assumption.
The default value is \code{'vrs'} (variable returns to scale). Other possible
options are \code{'crs'} (constant returns to scale), \code{'nirs'}
(non-increasing returns to scale), or \code{'ndrs'} (non-decreasing returns
to scale).}

\item{parallel}{Logical. Allows parallel computation. If \code{FALSE}
(default), the estimation is conducted in sequential mode. If \code{TRUE},
parallel mode is activated using the number of cores specified in
\code{cores}. When the sample size is small, it is recommended to keep the
\code{parallel} option to its default value (\code{FALSE}).}

\item{cores}{Integer. Used only if \code{parallel = TRUE}. It specifies the
number of cores to be used for parallel computation. By default,
\code{cores = availableCores(omit = 1)}.}
}
\value{
\code{costFun} returns a tibble that contains three columns.
The first column (\code{'CostEff'}), contains the cost efficiency scores,
the second column (\code{'CostMin'}) contains the minimum cost and the third
column (\code{'Benchmarks'}) contains the benchmark for each evaluated
observation.
}
\description{
Given a vector of input prices, \code{costFun} estimates the vector of
input quantities that minimizes the cost subject to different returns to
scale assumptions.
}
\details{
All estimations are based on the implicit enumeration algorithm
(Briec et al. 2004). Let's assume that there are
\eqn{1,\cdots, N} decision making units (DMUs). Each DMU uses \eqn{K} inputs
to produce \eqn{Q} outputs. The price vector of the \eqn{K} inputs is also
provided (\eqn{\mathbf{w}}). Therefore, the enumeration algorithms to obtain
the minimum cost, and hence the cost efficiency are detailed next.

\itemize{
\item{variable returns to scale - \code{'vrs'}}{\deqn{C_{min}
\left(\mathbf{w}^\circ, \mathbf{y}^\circ\right)=
\displaystyle\min_{\mathbf{y}^\circ \leq \mathbf{y}_n}
\left\{\mathbf{w}^\circ \mathbf{x}_n\right\}}}

\item{constant returns to scale - \code{'crs'}}{\deqn{C_{min}
\left(\mathbf{w}^\circ, \mathbf{y}^\circ\right)=
\displaystyle\min_{n=1, \cdots, N} \left\{\displaystyle\max_{q=1, \cdots, Q}
\left(\frac{y_q^\circ}{y_{qn}}\right) \cdot
 \mathbf{w}^\circ \mathbf{x}_n\right\}}}

\item{nonincreasing returns to scale - \code{'nirs'}}{\deqn{C_{min}
\left(\mathbf{w}^\circ, \mathbf{y}^\circ\right)=
\displaystyle\min_{\mathbf{y}^\circ \leq \mathbf{y}_n}
\left\{\displaystyle\max_{q=1, \cdots, Q}\left(
\frac{y_q^\circ}{y_{qn}}\right) \cdot \mathbf{w}^\circ \mathbf{x}_n\right\}}}

\item{nondecreasing returns to scale - \code{'ndrs'}}{\deqn{C_{min}
\left(\mathbf{w}^\circ, \mathbf{y}^\circ\right)=
\displaystyle\min_{n=1, \cdots, N} \left\{\max \left\{
\displaystyle\max_{q=1, \cdots, Q}\left(
\frac{y_q^\circ}{y_{qn}}\right), 1\right\}
\cdot \mathbf{w}^\circ \mathbf{x}_n\right\}}}
}

The cost efficiency can be obtained as

\deqn{CE=\frac{C_{min}}{C_{observed}}}
}
\examples{
# variable returns to scale
fdh_cost_vrs <- costFun(xobs = as.matrix(apple[, c('K', 'L', 'M')]),
yobs = as.matrix(apple[, c('Y1Z', 'Y2Z')]),
wobs = as.matrix(apple[, c('PK', 'PL', 'PM')]), rts = 'vrs')

# constant returns to scale
fdh_cost_crs <- costFun(xobs = as.matrix(apple[, c('K', 'L', 'M')]),
yobs = as.matrix(apple[, c('Y1Z', 'Y2Z')]),
wobs = as.matrix(apple[, c('PK', 'PL', 'PM')]), rts = 'crs')

# nonincreasing returns to scale
fdh_cost_nirs <- costFun(xobs = as.matrix(apple[, c('K', 'L', 'M')]),
yobs = as.matrix(apple[, c('Y1Z', 'Y2Z')]),
wobs = as.matrix(apple[, c('PK', 'PL', 'PM')]), rts = 'nirs')
}
\references{
Briec, W., Kerstens, K., & Eeckaut, P. V. (2004). Non-convex
technologies and cost functions: Definitions, duality and nonparametric
tests of convexity. \emph{Journal of Economics-Zeitschrift Fur Nationalokonomie},
\bold{81}(2), 155-192. doi: \url{10.1007/s00712-003-0620-y}
}
\keyword{models}
\keyword{optimize}
